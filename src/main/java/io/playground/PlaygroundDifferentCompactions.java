/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.playground;

import static io.playground.RocksLoad.doFullCompactionOnDefaultColumnFamily;
import static io.playground.RocksLoad.fillDb;

import org.rocksdb.LRUCache;
import org.rocksdb.Options;
import org.rocksdb.RocksDB;
import org.rocksdb.RocksDBException;

public class PlaygroundDifferentCompactions {


    public static void main(String[] args) {

        RocksDB.loadLibrary();

        try (final Options options = new Options()
                .setCreateIfMissing(true)
                .setDisableAutoCompactions(true)
                .setAllowConcurrentMemtableWrite(true)
                .setRowCache(new LRUCache(1_000_000_000_000L))
        ) {
            try (final RocksDB db = RocksDB
                    .open(options, "/tmp/rocksdb-compacted-8subcompactions-128000000")) {
//                System.out.println("Live files after compaction:");

                // generate db with 20m docs and 100m writes
                // âžœ  ~ du -h /tmp/rocksdb
                // 24G	/tmp/rocksdb
                 fillDb(db, 20, 5);

                // previously generated DB sstables=408
                // time to compact (0 subcompactions) 54s out files 1
//                doFullCompactionOnDefaultColumnFamily(db, 0);

                // previously generated DB sstables=408
                // time to compact (8 subcompactions) 52s out files 1
//                doFullCompactionOnDefaultColumnFamily(db, 8);

                // previously generated DB sstables=408
                // time to compact (8 subcompactions, file mas size 128_000_000) 52 s out files 1
                doFullCompactionOnDefaultColumnFamily(db, 8);

//                for (int i = 0; i < 5; i++) {
//
//                    doReads(db);
//                    System.out.println("Live files after read:");
//                    printLiveFiles(db);
//                    System.out.println("------------------------------ totalWrites=" + totalWrites);
//                }

//                System.out.println("Total written quotes nr=" + totalWrites);
//
//                doFullCompactionOnDefaultColumnFamily(db);
//
//                System.out.println("Live files after compaction:");
//                printLiveFiles(db);
//                System.out.println("------------------------------------");
//
//                for (int i = 0; i < 15; i++) {
//
//                    doReads(db);
//                    System.out.println("Live files after read:");
//                    printLiveFiles(db);
//                    System.out.println("------------------------------------");
//
//                }

            }

        } catch (RocksDBException e) {
            e.printStackTrace();
        } finally {

        }
    }

}
